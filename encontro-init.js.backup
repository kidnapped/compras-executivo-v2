/**
 * Encontro de Contas - Initialization Module
 * Handles page load, card creation, and real data fetching orchestration
 */

const EncontroInit = {
  contractId: null,
  isDataLoaded: false,

  /**
   * Initialize the encontro page
   */
  init() {
    console.log("üöÄ Initializing Encontro de Contas...");

    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.onDOMReady());
    } else {
      this.onDOMReady();
    }
  },

  /**
   * Handle DOM ready event
   */
  async onDOMReady() {
    console.log("‚úÖ DOM Ready - Creating cards...");

    // Only initialize if we're on the encontro page
    if (!this.isEncontroPage()) {
      console.log("‚ÑπÔ∏è Not on encontro page, skipping initialization");
      return;
    }

    // Get contract ID from URL or page data
    this.contractId = this.getContractIdFromURL();
    if (this.contractId) {
      console.log(`üîç Found contract ID: ${this.contractId}`);
    }

    // Set up DataStore event listeners
    this.setupDataStoreListeners();

    // Create page cards
    this.createPageCards();

    // Initialize data fetching if we have a contract ID
    if (this.contractId) {
      console.log("üì° Initializing data fetching...");
      await this.initializeDataFetching();
      
      // After data is loaded, populate cards
      if (this.isDataLoaded) {
        this.populateCardsWithData();
      }
    }

    console.log("‚úÖ Encontro initialization complete");
  },
    
    const DataStore = window.DataStore;
    if (!DataStore) {
      console.warn("‚ö†Ô∏è DataStore not available");
      return;
    }

    // Debug: Check what data we have
    const tudoData = DataStore.getData('tudo');
    console.log("üîç Debug - tudoData:", tudoData);
    
    if (tudoData && tudoData.empenhos_data) {
      console.log(`üìä Processing ${tudoData.empenhos_data.length} empenhos`);
    }

    // Update all cards
    this.updateUltimosLancamentosWithDAR();
    this.updateHistoricoOrcamentario();
    this.updateEmpenhosOriginais();
    this.updateFinanceiroGrid();
    this.updateMovimentacoes();ady
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => this.onDOMReady());
    } else {
      this.onDOMReady();
    }
  },

  /**
   * Called when DOM is fully loaded
   */
  async onDOMReady() {
    console.log("‚úÖ DOM Ready - Creating cards...");

    try {
      // Only create cards if we're on the encontro page
      if (this.isEncontroPage()) {
        // Get contract ID from URL
        this.contractId = this.getContractIdFromURL();
        
        if (this.contractId) {
          console.log(`üîç Found contract ID: ${this.contractId}`);
          
          // Create cards with loading states
          this.createPageCards();
          
          // Start data fetching
          await this.initializeDataFetching();
          
          // Populate cards with real data
          this.populateCardsWithData();
        } else {
          console.warn("‚ö†Ô∏è No contract ID found in URL");
          this.createPageCards();
          this.showNoContractMessage();
        }
      }

      console.log("‚úÖ Encontro initialization complete");
    } catch (error) {
      console.error("‚ùå Error initializing encontro:", error);
      this.handleInitializationError(error);
    }
  },

  /**
   * Get contract ID from URL parameters
   */
  getContractIdFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get("contrato") || urlParams.get("contract") || urlParams.get("id");
  },

  /**
   * Check if we're on the encontro de contas page
   */
  isEncontroPage() {
    return (
      window.location.pathname.includes("encontro-de-contas") ||
      document.querySelector("#ultimos-lancamentos-container") !== null
    );
  },

  /**
   * Creates all the cards for the encontro page
   */
  createPageCards() {
    console.log("üé® Creating page cards...");

    // 1. Replace "√öltimos Lan√ßamentos" card
    this.createUltimosLancamentosCard();

    // 2. Replace "Hist√≥rico Or√ßament√°rio" card
    this.createHistoricoOrcamentarioCard();

    // 3. Replace "Empenhos Originais" card
    this.createEmpenhosOriginaisCard();

    // 4. Create additional cards
    this.createFinanceiroGridCard();
    this.createMovimentacoesCard();
  },

  /**
   * Creates the "√öltimos Lan√ßamentos" card
   */
  createUltimosLancamentosCard() {
    const container = document.querySelector("#ultimos-lancamentos-container");
    if (!container) {
      console.warn("Container #ultimos-lancamentos-container not found");
      return;
    }

    const CardGenerator = window.CardGenerator;
    if (!CardGenerator) {
      console.warn("CardGenerator not available");
      return;
    }

    const card = CardGenerator.createCard({
      title: "√öltimos Lan√ßamentos",
      subtitle: "Valores financeiro e or√ßament√°rio deste contrato",
      tbodyId: "ultimos-lancamentos-tbody",
      headers: ["üìÑ", "Data", "üí∞", "Detalhes"],
      containerClass: "h-100",
    });

    // Replace the existing container content
    container.parentNode.replaceChild(card, container);
    card.id = "ultimos-lancamentos-container"; // Preserve the ID

    // Show loading state
    const LoadingComponent = window.LoadingComponent;
    if (LoadingComponent) {
      LoadingComponent.showTableLoading("ultimos-lancamentos-tbody", "Carregando √∫ltimos lan√ßamentos...");
    }

    console.log("‚úÖ √öltimos Lan√ßamentos card created");
  },

  /**
   * Creates the "Hist√≥rico Or√ßament√°rio" card
   */
  createHistoricoOrcamentarioCard() {
    const container = document.querySelector("#historico-orcamentario-container");
    if (!container) {
      console.warn("Container #historico-orcamentario-container not found");
      return;
    }

    const CardGenerator = window.CardGenerator;
    if (!CardGenerator) {
      console.warn("CardGenerator not available");
      return;
    }

    const card = CardGenerator.createPresetCard("financial", {
      title: "Hist√≥rico Or√ßament√°rio",
      subtitle: "Total de empenhos originais",
      tbodyId: "historico-orcamentario-tbody",
    });

    container.parentNode.replaceChild(card, container);
    card.id = "historico-orcamentario-container";

    // Show loading state
    const LoadingComponent = window.LoadingComponent;
    if (LoadingComponent) {
      LoadingComponent.showTableLoading("historico-orcamentario-tbody", "Carregando hist√≥rico or√ßament√°rio...");
    }

    console.log("‚úÖ Hist√≥rico Or√ßament√°rio card created");
  },

  /**
   * Creates the "Empenhos Originais" card
   */
  createEmpenhosOriginaisCard() {
    const container = document.querySelector("#empenhos-originais-container");
    if (!container) {
      console.warn("Container #empenhos-originais-container not found");
      return;
    }

    const CardGenerator = window.CardGenerator;
    if (!CardGenerator) {
      console.warn("CardGenerator not available");
      return;
    }

    const card = CardGenerator.createCard({
      title: "Empenhos Originais",
      subtitle: "Lista numerada de empenhos do contrato",
      tbodyId: "empenhos-originais-tbody",
      headers: ["#", "N√∫mero do Empenho", "Data", "Valor", "Status"],
      containerClass: "h-100",
    });

    container.parentNode.replaceChild(card, container);
    card.id = "empenhos-originais-container";

    // Show loading state
    const LoadingComponent = window.LoadingComponent;
    if (LoadingComponent) {
      LoadingComponent.showTableLoading("empenhos-originais-tbody", "Carregando empenhos originais...");
    }

    console.log("‚úÖ Empenhos Originais card created");
  },

  /**
   * Creates a card for the financeiro grid container
   */
  createFinanceiroGridCard() {
    const container = document.querySelector("#financeiro-grid-container");
    if (!container) return;

    const CardGenerator = window.CardGenerator;
    if (!CardGenerator) {
      console.warn("CardGenerator not available");
      return;
    }

    const card = CardGenerator.createPresetCard("financial", {
      title: "Grid Financeiro",
      subtitle: "Movimenta√ß√µes financeiras detalhadas",
      tbodyId: "financeiro-grid-tbody",
    });

    // Replace content but keep the container structure
    container.innerHTML = "";
    container.appendChild(card.querySelector(".card-header"));
    container.appendChild(card.querySelector(".card-content"));

    // Show loading state
    const LoadingComponent = window.LoadingComponent;
    if (LoadingComponent) {
      LoadingComponent.showTableLoading("financeiro-grid-tbody", "Carregando grid financeiro...");
    }

    console.log("‚úÖ Financeiro Grid card created");
  },

  /**
   * Creates a card for the movimentacoes container
   */
  createMovimentacoesCard() {
    const container = document.querySelector("#movimentacoes-container");
    if (!container) return;

    const CardGenerator = window.CardGenerator;
    if (!CardGenerator) {
      console.warn("CardGenerator not available");
      return;
    }

    const card = CardGenerator.createCard({
      title: "Movimenta√ß√µes",
      subtitle: "Hist√≥rico completo de movimenta√ß√µes",
      tbodyId: "movimentacoes-tbody",
      headers: ["Data/Hora", "Tipo", "Usu√°rio", "Descri√ß√£o"],
      containerClass: "h-100",
    });

    container.innerHTML = "";
    container.appendChild(card.querySelector(".card-header"));
    container.appendChild(card.querySelector(".card-content"));

    // Show loading state
    const LoadingComponent = window.LoadingComponent;
    if (LoadingComponent) {
      LoadingComponent.showTableLoading("movimentacoes-tbody", "Carregando movimenta√ß√µes...");
    }

    console.log("‚úÖ Movimenta√ß√µes card created");
  },

  /**
   * Initialize data fetching from API
   */
  async initializeDataFetching() {
    if (!this.contractId) {
      console.warn("‚ö†Ô∏è No contract ID available for data fetching");
      return;
    }

    console.log("üì° Initializing data fetching...");

    try {
      // Access modules from global scope
      const LoadingComponent = window.LoadingComponent;
      const EncontroAPI = window.EncontroAPI;
      const DataStore = window.DataStore;

      if (!LoadingComponent || !EncontroAPI || !DataStore) {
        console.warn("‚ö†Ô∏è Required modules not yet loaded, retrying...");
        setTimeout(() => this.initializeDataFetching(), 1000);
        return;
      }

      // Listen for data updates
      this.setupDataStoreListeners();

      // Fetch all data from API
      const response = await EncontroAPI.fetchTudoData(this.contractId);
      
      if (response && response.success) {
        console.log("‚úÖ Data fetched successfully:", response.data);
        this.isDataLoaded = true;
      } else {
        throw new Error(response?.message || 'Failed to fetch data');
      }

    } catch (error) {
      console.error("‚ùå Error fetching data:", error);
      this.handleDataFetchError(error);
    }
  },

  /**
   * Setup listeners for DataStore updates
   */
  setupDataStoreListeners() {
    const DataStore = window.DataStore;
    if (!DataStore) return;

    // Listen for tudo data loaded (comprehensive data)
    DataStore.on('tudoLoaded', () => {
      console.log("üìä Tudo data loaded, updating all cards...");
      this.updateUltimosLancamentosWithDAR();
      this.updateHistoricoOrcamentario();
      this.updateEmpenhosOriginais();
      this.updateFinanceiroGrid();
      this.updateMovimentacoes();
    });

    // Listen for any error
    DataStore.on('errorOccurred', (error) => {
      console.error('DataStore error:', error);
      this.handleDataStoreError(error);
    });
  },

  /**
   * Populate cards with real data from DataStore
   */
  populateCardsWithData() {
    if (!this.isDataLoaded) {
      console.warn("‚ö†Ô∏è Data not loaded yet, waiting...");
      return;
    }

    console.log("ÔøΩ Populating cards with real data...");

    // Update all cards
    this.updateUltimosLancamentosWithDAR();
    this.updateHistoricoOrcamentario();
    this.updateEmpenhosOriginais();
    this.updateFinanceiroGrid();
    this.updateMovimentacoes();
  },

  /**
   * Update "√öltimos Lan√ßamentos" with recent financial movements
   */
  updateUltimosLancamentosWithDAR() {
    const DataStore = window.DataStore;
    const LoadingComponent = window.LoadingComponent;
    const CardGenerator = window.CardGenerator;
    
    if (!DataStore || !LoadingComponent || !CardGenerator) return;

    const tudoData = DataStore.getData('tudo');
    const tbody = document.getElementById('ultimos-lancamentos-tbody');
    
    if (!tbody) return;

    if (!tudoData || !tudoData.empenhos_data || tudoData.empenhos_data.length === 0) {
      LoadingComponent.showTableEmpty('ultimos-lancamentos-tbody', 'Nenhum lan√ßamento encontrado');
      return;
    }

    // Get recent DARF documents (√∫ltimos lan√ßamentos)
    const recentMovements = [];
    tudoData.empenhos_data.forEach(empData => {
      if (empData.documentos_darf && empData.documentos_darf.length > 0) {
        empData.documentos_darf.slice(-5).forEach(darf => {
          recentMovements.push({
            icon: "üìÑ",
            data: this.formatDate(`${darf.id_ano_vencimento_doc}-${darf.id_mes_vencimento_doc.padStart(2, '0')}-${darf.id_dia_vencimento_doc.padStart(2, '0')}`),
            money: "üí∞", 
            detalhes: `DARF ${darf.id_doc_darf.substr(-6)} - ${this.formatCurrency(darf.va_receita)}`
          });
        });
      }
    });

    // Sort by date and take most recent
    recentMovements.sort((a, b) => b.data.localeCompare(a.data));
    const tableData = recentMovements.slice(0, 5);

    if (tableData.length === 0) {
      LoadingComponent.showTableEmpty('ultimos-lancamentos-tbody', 'Nenhum lan√ßamento encontrado');
      return;
    }

    CardGenerator.populateTable('ultimos-lancamentos-tbody', tableData);
    console.log("‚úÖ Updated √öltimos Lan√ßamentos with recent movements");
  },

  /**
   * Update "Hist√≥rico Or√ßament√°rio" with empenho operations
   */
  updateHistoricoOrcamentario() {
    const DataStore = window.DataStore;
    const LoadingComponent = window.LoadingComponent;
    const CardGenerator = window.CardGenerator;
    
    if (!DataStore || !LoadingComponent || !CardGenerator) return;

    const tudoData = DataStore.getData('tudo');
    const tbody = document.getElementById('historico-orcamentario-tbody');
    
    if (!tbody) return;

    if (!tudoData || !tudoData.empenhos_data || tudoData.empenhos_data.length === 0) {
      LoadingComponent.showTableEmpty('historico-orcamentario-tbody', 'Nenhum dado or√ßament√°rio encontrado');
      return;
    }

    // Get budget operations from ne_item_operacao
    const budgetOps = [];
    tudoData.empenhos_data.forEach(empData => {
      if (empData.ne_item_operacao && empData.ne_item_operacao.length > 0) {
        empData.ne_item_operacao.forEach(op => {
          budgetOps.push({
            icon: this.getOperationIcon(op.no_operacao),
            data: this.formatDate(op.dt_operacao),
            valor: this.formatCurrency(op.va_operacao)
          });
        });
      }
    });

    // Sort by date and take recent ones
    budgetOps.sort((a, b) => b.data.localeCompare(a.data));
    const tableData = budgetOps.slice(0, 10);

    if (tableData.length === 0) {
      LoadingComponent.showTableEmpty('historico-orcamentario-tbody', 'Nenhum dado or√ßament√°rio encontrado');
      return;
    }

    CardGenerator.populateTable('historico-orcamentario-tbody', tableData);
    console.log("‚úÖ Updated Hist√≥rico Or√ßament√°rio");
  },

  /**
   * Update "Empenhos Originais" with empenho data
   */
  updateEmpenhosOriginais() {
    const DataStore = window.DataStore;
    const LoadingComponent = window.LoadingComponent;
    const CardGenerator = window.CardGenerator;
    
    if (!DataStore || !LoadingComponent || !CardGenerator) return;

    const tudoData = DataStore.getData('tudo');
    const tbody = document.getElementById('empenhos-originais-tbody');
    
    if (!tbody) return;

    if (!tudoData || !tudoData.empenhos_data || tudoData.empenhos_data.length === 0) {
      LoadingComponent.showTableEmpty('empenhos-originais-tbody', 'Nenhum empenho encontrado');
      return;
    }

    // Transform empenho data to table format
    const tableData = tudoData.empenhos_data.map((empData, index) => ({
      numero: index + 1,
      icon1: "üìã",
      empenho: empData.empenho.numero,
      data: this.formatDate(empData.empenho.data_emissao),
      icon2: "üí∞",
      valor: this.formatCurrency(empData.empenho.empenhado),
      especie: "Original",
      orcamentario: this.formatCurrency(empData.empenho.empenhado),
      financas: this.formatCurrency(empData.empenho.pago),
      saldo: this.formatCurrency(empData.empenho.aliquidar),
      status: this.getEmpenhoStatus(empData.empenho),
      icon3: "üìä",
      icon4: "üîç"
    }));

    CardGenerator.populateTable('empenhos-originais-tbody', tableData);
    console.log("‚úÖ Updated Empenhos Originais");
  },

  /**
   * Update "Grid Financeiro" with payment documents (OB)
   */
  updateFinanceiroGrid() {
    const DataStore = window.DataStore;
    const LoadingComponent = window.LoadingComponent;
    const CardGenerator = window.CardGenerator;
    
    if (!DataStore || !LoadingComponent || !CardGenerator) return;

    const tudoData = DataStore.getData('tudo');
    const tbody = document.getElementById('financeiro-grid-tbody');
    
    if (!tbody) return;

    if (!tudoData || !tudoData.empenhos_data || tudoData.empenhos_data.length === 0) {
      LoadingComponent.showTableEmpty('financeiro-grid-tbody', 'Nenhuma movimenta√ß√£o financeira encontrada');
      return;
    }

    // Get payment lines from linha_evento_ob
    const payments = [];
    tudoData.empenhos_data.forEach(empData => {
      if (empData.linha_evento_ob && empData.linha_evento_ob.length > 0) {
        empData.linha_evento_ob.forEach((ob, index) => {
          payments.push({
            numero: index + 1,
            data: this.formatDateFromOB(ob.dt_carga_c),
            pagamento: ob.nr_ordem_pagamento,
            icon1: "üí≥",
            tipo: this.getOBType(ob.id_tp_ob),
            parcial: this.formatCurrency(ob.va_linha_evento),
            nominal: this.formatCurrency(ob.va_linha_evento),
            icon2: "üìã"
          });
        });
      }
    });

    // Sort by date and take recent ones
    payments.sort((a, b) => b.data.localeCompare(a.data));
    const tableData = payments.slice(0, 15);

    if (tableData.length === 0) {
      LoadingComponent.showTableEmpty('financeiro-grid-tbody', 'Nenhuma movimenta√ß√£o financeira encontrada');
      return;
    }

    CardGenerator.populateTable('financeiro-grid-tbody', tableData);
    console.log("‚úÖ Updated Grid Financeiro");
  },

  /**
   * Update "Movimenta√ß√µes" with DARF tax documents
   */
  updateMovimentacoes() {
    const DataStore = window.DataStore;
    const LoadingComponent = window.LoadingComponent;
    const CardGenerator = window.CardGenerator;
    
    if (!DataStore || !LoadingComponent || !CardGenerator) return;

    const tudoData = DataStore.getData('tudo');
    const tbody = document.getElementById('movimentacoes-tbody');
    
    if (!tbody) return;

    if (!tudoData || !tudoData.empenhos_data || tudoData.empenhos_data.length === 0) {
      LoadingComponent.showTableEmpty('movimentacoes-tbody', 'Nenhuma movimenta√ß√£o encontrada');
      return;
    }

    // Get DARF documents
    const movements = [];
    tudoData.empenhos_data.forEach((empData, empIndex) => {
      if (empData.documentos_darf && empData.documentos_darf.length > 0) {
        empData.documentos_darf.forEach((darf, index) => {
          movements.push({
            numero: index + 1,
            data: this.formatDate(`${darf.id_ano_vencimento_doc}-${darf.id_mes_vencimento_doc.padStart(2, '0')}-${darf.id_dia_vencimento_doc.padStart(2, '0')}`),
            empenho: empData.empenho.numero,
            icon1: "üìã",
            especie: "DARF",
            valor: this.formatCurrency(darf.va_receita),
            icon2: "üí∞"
          });
        });
      }
    });

    // Sort by date and take recent ones
    movements.sort((a, b) => b.data.localeCompare(a.data));
    const tableData = movements.slice(0, 15);

    if (tableData.length === 0) {
      LoadingComponent.showTableEmpty('movimentacoes-tbody', 'Nenhuma movimenta√ß√£o encontrada');
      return;
    }

    CardGenerator.populateTable('movimentacoes-tbody', tableData);
    console.log("‚úÖ Updated Movimenta√ß√µes");
  },

  /**
   * Handle data fetching errors
   */
  handleDataFetchError(error) {
    console.error("‚ùå Data fetch error:", error);
    
    const LoadingComponent = window.LoadingComponent;
    if (!LoadingComponent) return;
    
    // Show error in all table bodies
    const tableIds = [
      'ultimos-lancamentos-tbody',
      'historico-orcamentario-tbody', 
      'empenhos-originais-tbody',
      'financeiro-grid-tbody',
      'movimentacoes-tbody'
    ];

    tableIds.forEach(id => {
      LoadingComponent.showTableError(id, `Erro ao carregar dados: ${error.message}`);
    });
  },

  /**
   * Handle DataStore errors
   */
  handleDataStoreError(error) {
    console.error("‚ùå DataStore error:", error);
    // Could show toast notification or other user feedback
  },

  /**
   * Handle initialization errors
   */
  handleInitializationError(error) {
    console.error("‚ùå Initialization error:", error);
    
    const LoadingComponent = window.LoadingComponent;
    if (!LoadingComponent) return;
    
    // Show error message in main container
    const mainContainer = document.querySelector('.encontro-cards-row') || document.body;
    if (mainContainer) {
      LoadingComponent.showContainerError(mainContainer.id || 'main-container', 
        'Erro ao inicializar a p√°gina. Tente recarregar.');
    }
  },

  /**
   * Show message when no contract ID is found
   */
  showNoContractMessage() {
    const LoadingComponent = window.LoadingComponent;
    if (!LoadingComponent) return;

    const tableIds = [
      'ultimos-lancamentos-tbody',
      'historico-orcamentario-tbody', 
      'empenhos-originais-tbody',
      'financeiro-grid-tbody',
      'movimentacoes-tbody'
    ];

    tableIds.forEach(id => {
      LoadingComponent.showTableEmpty(id, 'Nenhum contrato selecionado');
    });
  },

  // Utility formatting methods

  /**
   * Format date to Brazilian format
   */
  formatDate(dateString) {
    if (!dateString) return '--';
    
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('pt-BR');
    } catch (error) {
      return dateString; // Return original if can't format
    }
  },

  /**
   * Format date and time to Brazilian format
   */
  formatDateTime(dateString) {
    if (!dateString) return '--';
    
    try {
      const date = new Date(dateString);
      return date.toLocaleString('pt-BR');
    } catch (error) {
      return dateString; // Return original if can't format
    }
  },

  /**
   * Format currency to Brazilian Real
   */
  formatCurrency(value) {
    if (value === null || value === undefined) return 'R$ 0,00';
    
    try {
      const numValue = typeof value === 'string' ? parseFloat(value) : value;
      return new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL'
      }).format(numValue);
    } catch (error) {
      return `R$ ${value}`;
    }
  },

  /**
   * Get document type from data
   */
  getDocumentType(item) {
    if (item.tipo_documento) return item.tipo_documento;
    if (item.numero_documento && item.numero_documento.includes('DAR')) return 'DAR';
    if (item.numero_documento && item.numero_documento.includes('DARF')) return 'DARF';
    if (item.numero_documento && item.numero_documento.includes('GPS')) return 'GPS';
    return 'Documento';
  },

  /**
   * Get empenho status with icons
   */
  getEmpenhoStatus(situacao) {
    const statusMap = {
      'A': '‚úÖ Ativo',
      'C': '‚ùå Cancelado',
      'P': '‚è≥ Pendente',
      'L': 'üîí Liquidado',
      'E': 'üîÑ Em andamento'
    };
    
    return statusMap[situacao] || '‚ùì Indefinido';
  },

  /**
   * Get evento type from linha evento data
   */
  getEventoType(evento) {
    if (!evento) return 'Movimento';
    
    const tipoMap = {
      'PAG': 'Pagamento',
      'EST': 'Estorno', 
      'LIQ': 'Liquida√ß√£o',
      'EMP': 'Empenho',
      'ANU': 'Anula√ß√£o'
    };
    
    // Check if evento contains any of the mapped codes
    for (const [code, description] of Object.entries(tipoMap)) {
      if (evento.includes(code)) {
        return description;
      }
    }
    
    return evento;
  },

  /**
   * Get operation icon based on operation type
   */
  getOperationIcon(operacao) {
    const iconMap = {
      'INCLUSAO': '‚ûï',
      'REFORCO': 'üìà',
      'ANULACAO': '‚ùå', 
      'INSCRICAO EM RP': 'üìù',
      'ESTORNO': 'üîÑ'
    };
    return iconMap[operacao] || 'üìã';
  },

  /**
   * Get OB (Ordem Banc√°ria) type description
   */
  getOBType(tipoOB) {
    const tipoMap = {
      '59': 'Pagamento',
      '60': 'Estorno',
      '61': 'Transfer√™ncia'
    };
    return tipoMap[tipoOB] || 'Movimento';
  },

  /**
   * Format date from OB carga format (YYYYMMDD)
   */
  formatDateFromOB(dtCarga) {
    if (!dtCarga) return '';
    
    const str = String(dtCarga);
    if (str.length === 8) {
      const year = str.substr(0, 4);
      const month = str.substr(4, 2);
      const day = str.substr(6, 2);
      return this.formatDate(`${year}-${month}-${day}`);
    }
    return str;
  },

  /**
   * Public API methods for external access
   */

  // Manual methods for testing/debugging
  async loadContractData(contratoId) {
    console.log(`üìã Loading contract data for ID: ${contratoId}`);
    this.contractId = contratoId;
    
    try {
      await this.initializeDataFetching();
      this.populateCardsWithData();
      return { success: true, message: `Contract ${contratoId} data loaded` };
    } catch (error) {
      console.error('Error loading contract data:', error);
      return { success: false, error: error.message };
    }
  },

  refreshCards() {
    console.log("üîÑ Refreshing all cards...");
    if (this.isEncontroPage()) {
      this.createPageCards();
      if (this.contractId && this.isDataLoaded) {
        this.populateCardsWithData();
      }
    }
  },

  // Get current contract ID
  getContractId() {
    return this.contractId;
  },

  // Check if data is loaded
  isDataLoaded() {
    return this.isDataLoaded;
  },

  // Force data refresh
  async refreshData() {
    if (this.contractId) {
      this.isDataLoaded = false;
      await this.initializeDataFetching();
      this.populateCardsWithData();
    }
  }
};

// Don't auto-initialize - let app.js handle initialization order
// EncontroInit.init();

// Expose to global scope for debugging/manual control
window.EncontroInit = EncontroInit;

// Export as default for compatibility with existing app.js import structure
export default EncontroInit;
