export default {
    // Vari√°veis para controlar execu√ß√µes m√∫ltiplas
    lastAutoInitTime: 0,
    lastInitCompleteTime: 0,
    isInitializing: false,
    isInitializingComplete: false,
    
    // M√©todo √∫nico para inicializa√ß√£o completa via SPA
    cpfAlias_initComplete() {
        console.log('üîß cpfAlias_initComplete() chamado via SPA');
        
        // Evitar execu√ß√£o dupla
        const now = Date.now();
        if (now - this.lastInitCompleteTime < 800) {
            console.log('‚ö†Ô∏è cpfAlias_initComplete ignorado - muito r√°pido');
            return;
        }
        
        // Evitar sobreposi√ß√£o de execu√ß√µes
        if (this.isInitializingComplete) {
            console.log('‚ö†Ô∏è cpfAlias_initComplete ignorado - j√° inicializando');
            return;
        }
        
        this.lastInitCompleteTime = now;
        this.isInitializingComplete = true;
        
        // Aguardar o DOM estar pronto e tentar encontrar o elemento
        const waitForElement = (attempts = 0) => {
            const cpfAliasPage = document.querySelector('.cpf-alias-page');
            console.log('üîç Tentativa', attempts + 1, '- Elemento .cpf-alias-page encontrado:', !!cpfAliasPage);
            
            if (cpfAliasPage) {
                console.log('‚úÖ P√°gina cpf-alias encontrada, inicializando componentes...');
                
                // Inicializar componentes din√¢micos
                this.cpfAlias_initBreadcrumb();
                this.cpfAlias_initTopico();
                
                // Inicializar a tela
                setTimeout(() => {
                    this.init();
                    this.isInitializingComplete = false;
                }, 100);
            } else if (attempts < 10) {
                // Tentar novamente ap√≥s um pequeno delay
                console.log('‚è≥ Aguardando elemento aparecer... tentativa', attempts + 1);
                setTimeout(() => waitForElement(attempts + 1), 100);
            } else {
                console.log('‚ùå P√°gina cpf-alias n√£o encontrada ap√≥s 10 tentativas');
                this.isInitializingComplete = false;
            }
        };
        
        // Iniciar verifica√ß√£o
        waitForElement();
    },

    // Inicializar breadcrumb dinamicamente
    cpfAlias_initBreadcrumb() {
        console.log('üîß Inicializando breadcrumb CPF Alias...');
        
        if (typeof App !== "undefined" && App.breadcrumb && App.breadcrumb.breadcrumb_createDynamic) {
            const breadcrumbItems = [
                {title: 'P√°gina Inicial', icon: 'fas fa-home', url: '/'},
                {title: 'Administra√ß√£o', icon: 'fas fa-cog', url: '/admin'},
                {title: 'CPF Alias', icon: 'fas fa-user-tag', url: ''}
            ];
            
            App.breadcrumb.breadcrumb_createDynamic(breadcrumbItems, 'cpf-alias-breadcrumb-dynamic-container');
            console.log('‚úÖ Breadcrumb CPF Alias initialized dynamically');
        } else {
            console.warn('‚ùå Breadcrumb module not available - App:', typeof App, 'breadcrumb:', App?.breadcrumb ? 'exists' : 'missing');
            console.warn('‚è≥ Retrying in 500ms...');
            // Retry after a short delay if breadcrumb is not available yet
            setTimeout(() => {
                this.cpfAlias_initBreadcrumb();
            }, 500);
        }
    },

    // Inicializar t√≥pico dinamicamente
    cpfAlias_initTopico() {
        console.log('üîß Inicializando t√≥pico CPF Alias...');
        
        if (typeof App !== "undefined" && App.topico && App.topico.topico_createDynamic) {
            const topicoConfig = {
                title: 'CPF Alias',
                description: 'Gerenciamento de aliases de CPF',
                icon: 'fas fa-user-tag',
                tags: [
                    {
                        text: 'Administra√ß√£o',
                        type: 'info',
                        icon: 'fas fa-cog',
                        title: 'Funcionalidade administrativa'
                    },
                ],
                actions: [
                    {
                        icon: 'fas fa-plus',
                        text: 'Novo Alias',
                        title: 'Adicionar novo alias de CPF',
                        onclick: 'App.cpfAlias_showAddModal()',
                        type: 'primary'
                    },
                    {
                        icon: 'fas fa-cog',
                        text: 'Configura√ß√µes',
                        title: 'Configura√ß√µes do m√≥dulo',
                        onclick: 'App.cpfAlias_showSettings()',
                        type: 'secondary'
                    }
                ]
            };
            
            App.topico.topico_createDynamic(topicoConfig, 'cpf-alias-topico-container');
            console.log('‚úÖ Topico CPF Alias initialized dynamically');
        } else {
            console.warn('‚ùå Topico module not available - App:', typeof App, 'topico:', App?.topico ? 'exists' : 'missing');
            console.warn('‚è≥ Retrying in 500ms...');
            // Retry after a short delay if topico is not available yet
            setTimeout(() => {
                this.cpfAlias_initTopico();
            }, 500);
        }
    },
    
    // Inicializa√ß√£o da p√°gina CPF Alias
    init() {
        console.log("üè∑Ô∏è Inicializando p√°gina CPF Alias...");
        this.loadContent();
    },

    // Carrega o conte√∫do da p√°gina
    loadContent() {
        const container = document.getElementById("cpf-alias-content");
        if (!container) return;

        // Conte√∫do ser√° implementado aqui conforme necess√°rio
        container.innerHTML = `
            <!-- Conte√∫do do CPF Alias ser√° implementado aqui -->
        `;
    },

    // Auto-inicializa√ß√£o da p√°gina se estivermos na p√°gina correta
    autoInit() {
        console.log('üîß CpfAlias.autoInit() chamado');
        
        // Evitar execu√ß√µes m√∫ltiplas muito pr√≥ximas
        const now = Date.now();
        if (now - this.lastAutoInitTime < 1000) {
            console.log('‚ö†Ô∏è CpfAlias.autoInit ignorado - muito r√°pido');
            return;
        }
        
        // Evitar sobreposi√ß√£o de execu√ß√µes
        if (this.isInitializing) {
            console.log('‚ö†Ô∏è CpfAlias.autoInit ignorado - j√° inicializando');
            return;
        }
        
        this.lastAutoInitTime = now;
        this.isInitializing = true;
        
        // Fun√ß√£o para verificar e inicializar
        const checkAndInit = () => {
            // Verifica se estamos na p√°gina correta procurando pelo elemento principal
            const cpfAliasPage = document.querySelector('.cpf-alias-page');
            console.log('üîç Elemento .cpf-alias-page encontrado:', !!cpfAliasPage);
            console.log('üîç Pathname atual:', window.location.pathname);
            
            // Tamb√©m verificar pela URL se o elemento n√£o foi encontrado ainda
            const isCpfAliasRoute = window.location.pathname.includes('/admin/cpf_alias');
            console.log('üîç √â rota de cpf-alias:', isCpfAliasRoute);
            
            if (cpfAliasPage || isCpfAliasRoute) {
                console.log('‚úÖ Estamos na p√°gina cpf-alias, inicializando...');
                this.cpfAlias_initComplete();
            } else {
                console.log('‚ÑπÔ∏è N√£o estamos na p√°gina cpf-alias, pulando inicializa√ß√£o');
            }
            this.isInitializing = false;
        };
        
        // Executar verifica√ß√£o
        checkAndInit();
    }
};
